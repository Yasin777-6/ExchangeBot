import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler
from asgiref.sync import sync_to_async
from django.conf import settings
from django.utils import timezone
from decimal import Decimal
import uuid

from .models import TelegramUser, Item, Transaction, Review, UserRole, TransactionStatus, MerchantLevel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(CHOOSING_ROLE, ADDING_ITEM_TITLE, ADDING_ITEM_DESC, ADDING_ITEM_PRICE, ADDING_ITEM_CATEGORY,
 CONFIRM_PAYMENT, CONFIRM_DELIVERY, LEAVE_REVIEW_RATING, LEAVE_REVIEW_COMMENT) = range(9)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(role):
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    if role == UserRole.CLIENT:
        keyboard = [
            [KeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"), KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"), KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")],
            [KeyboardButton("üíº –°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
    elif role == UserRole.MERCHANT:
        keyboard = [
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton("üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")],
            [KeyboardButton("üí∞ –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏"), KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
    elif role == UserRole.ADMIN:
        keyboard = [
            [KeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã"), KeyboardButton("üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")],
            [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
    else:
        keyboard = [[KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å")]]
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    return ReplyKeyboardMarkup([[KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@sync_to_async
def get_or_create_user(telegram_user):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user, created = TelegramUser.objects.get_or_create(
        telegram_id=telegram_user.id,
        defaults={
            'username': telegram_user.username,
            'first_name': telegram_user.first_name,
            'last_name': telegram_user.last_name,
        }
    )
    if not created:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        user.username = telegram_user.username
        user.first_name = telegram_user.first_name
        user.last_name = telegram_user.last_name
        user.save()
    return user, created

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user, created = await get_or_create_user(update.effective_user)
    
    welcome_text = f"""
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Minecraft Marketplace!**

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã

–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ Minecraft.

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**

üîπ **–î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
2. –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É: `{settings.PAYMENT_CARD_NUMBER}`
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –±–æ—Ç–µ
4. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞
5. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ
6. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤

üîπ **–î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:**
1. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä (–¥–æ 5 —à—Ç.)
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
4. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
5. –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä
6. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

üí∞ **–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {settings.TRANSACTION_FEE_PERCENT}%**

üõ°Ô∏è **–ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
- –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
- –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
- –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ! üëá
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard(user.role)
    )

# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"""
    help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å

**–î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:**
‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ - —Ç–æ–ø –ø—Ä–æ–¥–∞–≤—Ü–æ–≤

**–î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:**
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
‚Ä¢ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
‚Ä¢ –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏ - –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂

**–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:**
ü•â –ë—Ä–æ–Ω–∑–∞: 0-1999 XP
ü•à –°–µ—Ä–µ–±—Ä–æ: 2000-4999 XP
ü•á –ó–æ–ª–æ—Ç–æ: 5000-9999 XP
üíé –ü–ª–∞—Ç–∏–Ω–∞: 10000+ XP

–ó–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–¥–∞–∂—É: +100 XP

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @atauq
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@sync_to_async
def get_user_profile_text(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = TelegramUser.objects.get(telegram_id=telegram_id)
        
        profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üì± Telegram ID: `{user.telegram_id}`
üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üè∑ –†–æ–ª—å: {user.get_role_display()}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}
"""
        
        if user.role == UserRole.MERCHANT:
            level_emoji = {
                MerchantLevel.BRONZE: 'ü•â',
                MerchantLevel.SILVER: 'ü•à',
                MerchantLevel.GOLD: 'ü•á',
                MerchantLevel.PLATINUM: 'üíé'
            }
            
            profile_text += f"""
**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:**
{level_emoji.get(user.merchant_level, 'ü•â')} –£—Ä–æ–≤–µ–Ω—å: {user.get_merchant_level_display()}
‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {user.rating}/5.00
üí∞ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {user.total_sales} —Ä—É–±.
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {user.total_transactions}
üéØ –û–ø—ã—Ç: {user.experience_points} XP
üìã –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤: {user.approved_items_count}
"""
        
        return profile_text
    except TelegramUser.DoesNotExist:
        return "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    profile_text = await get_user_profile_text(update.effective_user.id)
    await update.message.reply_text(profile_text, parse_mode='Markdown')

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
@sync_to_async
def get_items_list(offset=0, limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    items = Item.objects.filter(is_approved=True, is_active=True).select_related('merchant')[offset:offset+limit]
    return list(items)

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    items = await get_items_list()
    
    if not items:
        await update.message.reply_text(
            "üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –¢–æ–≤–∞—Ä—ã –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ!",
            reply_markup=get_back_keyboard()
        )
        return
    
    for item in items:
        item_text = f"""
üéÆ **{item.title}**

üìù {item.description}

üí∞ –¶–µ–Ω–∞: **{item.price} —Ä—É–±.**
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{item.merchant.username or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}
‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {item.merchant.rating}/5.00
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{item.id}")]
        ])
        
        await update.message.reply_text(
            item_text,
            parse_mode='Markdown',
            reply_markup=keyboard
        )

# –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
@sync_to_async
def create_transaction(item_id, client_telegram_id):
    """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
    try:
        item = Item.objects.select_related('merchant').get(id=item_id, is_approved=True, is_active=True)
        client = TelegramUser.objects.get(telegram_id=client_telegram_id)
        
        if client.telegram_id == item.merchant.telegram_id:
            return None, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä!"
        
        transaction_id = str(uuid.uuid4())[:8].upper()
        
        transaction = Transaction.objects.create(
            transaction_id=transaction_id,
            client=client,
            merchant=item.merchant,
            item=item,
            amount=item.price
        )
        
        return transaction, None
    except Item.DoesNotExist:
        return None, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except TelegramUser.DoesNotExist:
        return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

async def buy_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    item_id = int(query.data.split('_')[1])
    transaction, error = await create_transaction(item_id, update.effective_user.id)
    
    if error:
        await query.message.reply_text(f"‚ùå {error}")
        return
    
    payment_text = f"""
üí≥ **–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞**

üì¶ –¢–æ–≤–∞—Ä: {transaction.item.title}
üí∞ –°—É–º–º–∞: **{transaction.amount} —Ä—É–±.**
üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction.transaction_id}`

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:**

1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ **{transaction.amount} —Ä—É–±.** –Ω–∞ –∫–∞—Ä—Ç—É:
`{settings.PAYMENT_CARD_NUMBER}`

2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"

3Ô∏è‚É£ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction.transaction_id}`
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{transaction.id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{transaction.id}")]
    ])
    
    await query.message.reply_text(
        payment_text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@sync_to_async
def confirm_payment(transaction_id, user_telegram_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"""
    try:
        transaction = Transaction.objects.select_related('client', 'merchant', 'item').get(
            id=transaction_id,
            client__telegram_id=user_telegram_id,
            status=TransactionStatus.PENDING_PAYMENT
        )
        
        transaction.status = TransactionStatus.PAYMENT_CONFIRMED
        transaction.payment_confirmed_at = timezone.now()
        transaction.save()
        
        return transaction, None
    except Transaction.DoesNotExist:
        return None, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

@sync_to_async
def get_admin_ids():
    """–ü–æ–ª—É—á–∏—Ç—å ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    admins = TelegramUser.objects.filter(role=UserRole.ADMIN, is_active=True)
    return [admin.telegram_id for admin in admins]

async def payment_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    transaction_id = int(query.data.split('_')[1])
    transaction, error = await confirm_payment(transaction_id, update.effective_user.id)
    
    if error:
        await query.message.reply_text(f"‚ùå {error}")
        return
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_text = f"""
‚úÖ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**

–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

üì¶ –¢–æ–≤–∞—Ä: {transaction.item.title}
üí∞ –°—É–º–º–∞: {transaction.amount} —Ä—É–±.
üÜî ID: `{transaction.transaction_id}`

–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.
"""
    await query.message.reply_text(client_text, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
    merchant_text = f"""
üîî **–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!**

üì¶ –¢–æ–≤–∞—Ä: {transaction.item.title}
üí∞ –°—É–º–º–∞: {transaction.amount} —Ä—É–±.
üÜî ID: `{transaction.transaction_id}`

–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
"""
    try:
        await context.bot.send_message(
            chat_id=transaction.merchant.telegram_id,
            text=merchant_text,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = await get_admin_ids()
    admin_text = f"""
üîî **–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏!**

üÜî ID: `{transaction.transaction_id}`
üì¶ –¢–æ–≤–∞—Ä: {transaction.item.title}
üí∞ –°—É–º–º–∞: {transaction.amount} —Ä—É–±.
üíµ –ö–æ–º–∏—Å—Å–∏—è: {transaction.fee_amount} —Ä—É–±.
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{transaction.client.username or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{transaction.merchant.username or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂ –∏ –æ–¥–æ–±—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_payment_{transaction.id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{transaction.id}")]
    ])
    
    for admin_id in admin_ids:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@sync_to_async
def approve_payment_by_admin(transaction_id):
    """–û–¥–æ–±—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        transaction = Transaction.objects.select_related('client', 'merchant', 'item').get(
            id=transaction_id,
            status=TransactionStatus.PAYMENT_CONFIRMED
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏
        transaction.client_contact = f"@{transaction.client.username}" if transaction.client.username else f"ID: {transaction.client.telegram_id}"
        transaction.merchant_contact = f"@{transaction.merchant.username}" if transaction.merchant.username else f"ID: {transaction.merchant.telegram_id}"
        transaction.save()
        
        return transaction, None
    except Transaction.DoesNotExist:
        return None, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

async def admin_approve_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂"""
    query = update.callback_query
    await query.answer()
    
    transaction_id = int(query.data.split('_')[2])
    transaction, error = await approve_payment_by_admin(transaction_id)
    
    if error:
        await query.message.reply_text(f"‚ùå {error}")
        return
    
    await query.message.edit_text(
        f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω! –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ –ø—Ä–æ–¥–∞–≤—Ü—É.",
        parse_mode='Markdown'
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    client_text = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!**

üì¶ –¢–æ–≤–∞—Ä: {transaction.item.title}
üÜî ID: `{transaction.transaction_id}`

**–ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:** {transaction.merchant_contact}

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–ª—É—á–∏–ª —Ç–æ–≤–∞—Ä", callback_data=f"received_{transaction.id}")]
    ])
    
    try:
        await context.bot.send_message(
            chat_id=transaction.client.telegram_id,
            text=client_text,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü—É
    merchant_text = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!**

üì¶ –¢–æ–≤–∞—Ä: {transaction.item.title}
üÜî ID: `{transaction.transaction_id}`

**–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:** {transaction.client_contact}

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä.
"""
    
    try:
        await context.bot.send_message(
            chat_id=transaction.merchant.telegram_id,
            text=merchant_text,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@sync_to_async
def confirm_item_received(transaction_id, user_telegram_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    try:
        transaction = Transaction.objects.select_related('client', 'merchant', 'item').get(
            id=transaction_id,
            client__telegram_id=user_telegram_id,
            status=TransactionStatus.PAYMENT_CONFIRMED
        )
        
        transaction.status = TransactionStatus.ITEM_DELIVERED
        transaction.item_delivered_at = timezone.now()
        transaction.save()
        
        return transaction, None
    except Transaction.DoesNotExist:
        return None, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

async def item_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    transaction_id = int(query.data.split('_')[1])
    transaction, error = await confirm_item_received(transaction_id, update.effective_user.id)
    
    if error:
        await query.message.reply_text(f"‚ùå {error}")
        return
    
    client_text = f"""
‚úÖ **–¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω!**

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!
–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ.
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{transaction.id}")]
    ])
    
    await query.message.reply_text(client_text, parse_mode='Markdown', reply_markup=keyboard)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = await get_admin_ids()
    admin_text = f"""
üîî **–¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º!**

üÜî ID: `{transaction.transaction_id}`
üì¶ –¢–æ–≤–∞—Ä: {transaction.item.title}
üí∞ –°—É–º–º–∞: {transaction.amount} —Ä—É–±.
üíµ –ö–æ–º–∏—Å—Å–∏—è: {transaction.fee_amount} —Ä—É–±.
üí∏ –ö –≤—ã–ø–ª–∞—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É: {transaction.merchant_amount} —Ä—É–±.

–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", callback_data=f"complete_{transaction.id}")]
    ])
    
    for admin_id in admin_ids:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@sync_to_async
def complete_transaction(transaction_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
    try:
        transaction = Transaction.objects.select_related('client', 'merchant', 'item').get(
            id=transaction_id,
            status=TransactionStatus.ITEM_DELIVERED
        )
        
        transaction.status = TransactionStatus.COMPLETED
        transaction.completed_at = timezone.now()
        transaction.save()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
        merchant = transaction.merchant
        merchant.total_sales += transaction.amount
        merchant.total_transactions += 1
        merchant.experience_points += 100
        merchant.update_merchant_level()
        merchant.save()
        
        return transaction, None
    except Transaction.DoesNotExist:
        return None, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

async def admin_complete_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    
    transaction_id = int(query.data.split('_')[1])
    transaction, error = await complete_transaction(transaction_id)
    
    if error:
        await query.message.reply_text(f"‚ùå {error}")
        return
    
    await query.message.edit_text(
        f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è `{transaction.transaction_id}` –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        parse_mode='Markdown'
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
    merchant_text = f"""
üí∞ **–î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã!**

–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è `{transaction.transaction_id}` –∑–∞–≤–µ—Ä—à–µ–Ω–∞.

üì¶ –¢–æ–≤–∞—Ä: {transaction.item.title}
üí∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {transaction.merchant_amount} —Ä—É–±.
üéØ +100 XP

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!
"""
    
    try:
        await context.bot.send_message(
            chat_id=transaction.merchant.telegram_id,
            text=merchant_text,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def start_add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    user, _ = await get_or_create_user(update.effective_user)
    
    if user.role != UserRole.MERCHANT:
        await update.message.reply_text(
            "‚ùå –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤—Ü—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã. –°—Ç–∞–Ω—å—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–º —á–µ—Ä–µ–∑ –º–µ–Ω—é!",
            reply_markup=get_main_keyboard(user.role)
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
    active_items_count = await sync_to_async(
        lambda: Item.objects.filter(merchant__telegram_id=update.effective_user.id, is_active=True).count()
    )()
    
    if active_items_count >= user.approved_items_count:
        await update.message.reply_text(
            f"‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ({user.approved_items_count} —à—Ç.).\n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.",
            reply_markup=get_main_keyboard(user.role)
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_back_keyboard()
    )
    return ADDING_ITEM_TITLE

async def add_item_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    context.user_data['item_title'] = update.message.text
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    return ADDING_ITEM_DESC

async def add_item_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    context.user_data['item_description'] = update.message.text
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    return ADDING_ITEM_PRICE

async def add_item_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = Decimal(update.message.text)
        if price <= 0:
            raise ValueError
        context.user_data['item_price'] = price
        await update.message.reply_text("üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û—Ä—É–∂–∏–µ, –ë—Ä–æ–Ω—è, –†–µ—Å—É—Ä—Å—ã):")
        return ADDING_ITEM_CATEGORY
    except (ValueError, Exception):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
        return ADDING_ITEM_PRICE

@sync_to_async
def create_item(telegram_id, title, description, price, category):
    """–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä"""
    try:
        merchant = TelegramUser.objects.get(telegram_id=telegram_id, role=UserRole.MERCHANT)
        item = Item.objects.create(
            merchant=merchant,
            title=title,
            description=description,
            price=price,
            category=category
        )
        return item, None
    except TelegramUser.DoesNotExist:
        return None, "–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω"

async def add_item_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä"""
    category = update.message.text
    
    item, error = await create_item(
        update.effective_user.id,
        context.user_data['item_title'],
        context.user_data['item_description'],
        context.user_data['item_price'],
        category
    )
    
    if error:
        await update.message.reply_text(f"‚ùå {error}")
        return ConversationHandler.END
    
    user, _ = await get_or_create_user(update.effective_user)
    
    await update.message.reply_text(
        f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üì¶ {item.title}\n"
        f"üí∞ {item.price} —Ä—É–±.\n\n"
        f"–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=get_main_keyboard(user.role)
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = await get_admin_ids()
    admin_text = f"""
üîî **–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!**

üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {item.title}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item.description}
üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{user.username or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}
"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_item_{item.id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_item_{item.id}")]
    ])
    
    for admin_id in admin_ids:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    context.user_data.clear()
    return ConversationHandler.END

# –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@sync_to_async
def approve_item(item_id):
    """–û–¥–æ–±—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä"""
    try:
        item = Item.objects.select_related('merchant').get(id=item_id)
        item.is_approved = True
        item.save()
        return item, None
    except Item.DoesNotExist:
        return None, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"

async def admin_approve_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä—è–µ—Ç —Ç–æ–≤–∞—Ä"""
    query = update.callback_query
    await query.answer()
    
    item_id = int(query.data.split('_')[2])
    item, error = await approve_item(item_id)
    
    if error:
        await query.message.reply_text(f"‚ùå {error}")
        return
    
    await query.message.edit_text(
        f"‚úÖ –¢–æ–≤–∞—Ä '{item.title}' –æ–¥–æ–±—Ä–µ–Ω!",
        parse_mode='Markdown'
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
    merchant_text = f"""
‚úÖ **–í–∞—à —Ç–æ–≤–∞—Ä –æ–¥–æ–±—Ä–µ–Ω!**

üì¶ {item.title}
üí∞ {item.price} —Ä—É–±.

–¢–æ–≤–∞—Ä —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!
"""
    
    try:
        await context.bot.send_message(
            chat_id=item.merchant.telegram_id,
            text=merchant_text,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

# –°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
@sync_to_async
def become_merchant(telegram_id):
    """–°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º"""
    try:
        user = TelegramUser.objects.get(telegram_id=telegram_id)
        if user.role == UserRole.MERCHANT:
            return None, "–í—ã —É–∂–µ –ø—Ä–æ–¥–∞–≤–µ—Ü!"
        user.role = UserRole.MERCHANT
        user.merchant_level = MerchantLevel.BRONZE
        user.save()
        return user, None
    except TelegramUser.DoesNotExist:
        return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

async def become_merchant_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º"""
    user, error = await become_merchant(update.effective_user.id)
    
    if error:
        await update.message.reply_text(f"‚ùå {error}")
        return
    
    await update.message.reply_text(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –ø—Ä–æ–¥–∞–≤–µ—Ü!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 5 —Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ª–∏–º–∏—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–ª–∏—á–µ–Ω.",
        reply_markup=get_main_keyboard(user.role)
    )

# –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@sync_to_async
def get_top_merchants(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
    merchants = TelegramUser.objects.filter(
        role=UserRole.MERCHANT,
        is_active=True
    ).order_by('-total_sales', '-rating')[:limit]
    return list(merchants)

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
    merchants = await get_top_merchants()
    
    if not merchants:
        await update.message.reply_text("üì≠ –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç.")
        return
    
    leaderboard_text = "üèÜ **–¢–æ–ø-10 –ø—Ä–æ–¥–∞–≤—Ü–æ–≤**\n\n"
    
    medals = ['ü•á', 'ü•à', 'ü•â']
    level_emoji = {
        MerchantLevel.BRONZE: 'ü•â',
        MerchantLevel.SILVER: 'ü•à',
        MerchantLevel.GOLD: 'ü•á',
        MerchantLevel.PLATINUM: 'üíé'
    }
    
    for i, merchant in enumerate(merchants, 1):
        medal = medals[i-1] if i <= 3 else f"{i}."
        level = level_emoji.get(merchant.merchant_level, 'ü•â')
        
        leaderboard_text += f"{medal} {level} @{merchant.username or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}\n"
        leaderboard_text += f"   üí∞ {merchant.total_sales} —Ä—É–±. | ‚≠êÔ∏è {merchant.rating}/5 | üì¶ {merchant.total_transactions} —Å–¥–µ–ª–æ–∫\n\n"
    
    await update.message.reply_text(leaderboard_text, parse_mode='Markdown')

# –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏
@sync_to_async
def get_user_purchases(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    transactions = Transaction.objects.filter(
        client__telegram_id=telegram_id
    ).select_related('item', 'merchant').order_by('-created_at')[:10]
    return list(transactions)

async def show_my_purchases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–∫—É–ø–∫–∏"""
    transactions = await get_user_purchases(update.effective_user.id)
    
    if not transactions:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.")
        return
    
    purchases_text = "üì¶ **–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏**\n\n"
    
    status_emoji = {
        TransactionStatus.PENDING_PAYMENT: '‚è≥',
        TransactionStatus.PAYMENT_CONFIRMED: '‚úÖ',
        TransactionStatus.ITEM_DELIVERED: 'üì¶',
        TransactionStatus.COMPLETED: '‚úîÔ∏è',
        TransactionStatus.CANCELLED: '‚ùå'
    }
    
    for t in transactions:
        emoji = status_emoji.get(t.status, '‚ùì')
        purchases_text += f"{emoji} **{t.item.title}**\n"
        purchases_text += f"   üí∞ {t.amount} —Ä—É–±. | üÜî `{t.transaction_id}`\n"
        purchases_text += f"   –°—Ç–∞—Ç—É—Å: {t.get_status_display()}\n\n"
    
    await update.message.reply_text(purchases_text, parse_mode='Markdown')

# –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏
@sync_to_async
def get_merchant_sales(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    transactions = Transaction.objects.filter(
        merchant__telegram_id=telegram_id
    ).select_related('item', 'client').order_by('-created_at')[:10]
    return list(transactions)

async def show_my_sales(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–æ–¥–∞–∂–∏"""
    transactions = await get_merchant_sales(update.effective_user.id)
    
    if not transactions:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂.")
        return
    
    sales_text = "üí∞ **–ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏**\n\n"
    
    status_emoji = {
        TransactionStatus.PENDING_PAYMENT: '‚è≥',
        TransactionStatus.PAYMENT_CONFIRMED: '‚úÖ',
        TransactionStatus.ITEM_DELIVERED: 'üì¶',
        TransactionStatus.COMPLETED: '‚úîÔ∏è',
        TransactionStatus.CANCELLED: '‚ùå'
    }
    
    for t in transactions:
        emoji = status_emoji.get(t.status, '‚ùì')
        sales_text += f"{emoji} **{t.item.title}**\n"
        sales_text += f"   üí∞ {t.merchant_amount} —Ä—É–±. | üÜî `{t.transaction_id}`\n"
        sales_text += f"   –°—Ç–∞—Ç—É—Å: {t.get_status_display()}\n\n"
    
    await update.message.reply_text(sales_text, parse_mode='Markdown')

# –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã
@sync_to_async
def get_merchant_items(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    items = Item.objects.filter(
        merchant__telegram_id=telegram_id,
        is_active=True
    ).order_by('-created_at')
    return list(items)

async def show_my_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç–æ–≤–∞—Ä—ã"""
    items = await get_merchant_items(update.effective_user.id)
    
    if not items:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    for item in items:
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if item.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        item_text = f"""
üì¶ **{item.title}**

üìù {item.description}
üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}
üìä –°—Ç–∞—Ç—É—Å: {status}
üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {item.views_count}
"""
        await update.message.reply_text(item_text, parse_mode='Markdown')

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@sync_to_async
def get_pending_items():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    items = Item.objects.filter(is_approved=False, is_active=True).select_related('merchant')[:20]
    return list(items)

async def show_pending_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    items = await get_pending_items()
    
    if not items:
        await update.message.reply_text("‚úÖ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!")
        return
    
    await update.message.reply_text(f"üìã **–¢–æ–≤–∞—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ({len(items)}):**\n", parse_mode='Markdown')
    
    for item in items:
        item_text = f"""
üì¶ **{item.title}**

üìù {item.description}
üí∞ –¶–µ–Ω–∞: {item.price} —Ä—É–±.
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{item.merchant.username or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}
üÜî ID —Ç–æ–≤–∞—Ä–∞: {item.id}
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_item_{item.id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_item_{item.id}")]
        ])
        
        await update.message.reply_text(item_text, parse_mode='Markdown', reply_markup=keyboard)

@sync_to_async
def get_recent_transactions(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    transactions = Transaction.objects.select_related('client', 'merchant', 'item').order_by('-created_at')[:limit]
    return list(transactions)

async def show_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    transactions = await get_recent_transactions()
    
    if not transactions:
        await update.message.reply_text("üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return
    
    trans_text = "üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:**\n\n"
    
    status_emoji = {
        TransactionStatus.PENDING_PAYMENT: '‚è≥',
        TransactionStatus.PAYMENT_CONFIRMED: '‚úÖ',
        TransactionStatus.ITEM_DELIVERED: 'üì¶',
        TransactionStatus.COMPLETED: '‚úîÔ∏è',
        TransactionStatus.CANCELLED: '‚ùå'
    }
    
    for t in transactions:
        emoji = status_emoji.get(t.status, '‚ùì')
        trans_text += f"{emoji} **{t.item.title}**\n"
        trans_text += f"   üí∞ {t.amount} —Ä—É–±. | üÜî `{t.transaction_id}`\n"
        trans_text += f"   üë§ {t.client.username or '–ö–ª–∏–µ–Ω—Ç'} ‚Üí {t.merchant.username or '–ü—Ä–æ–¥–∞–≤–µ—Ü'}\n"
        trans_text += f"   üìÖ {t.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    await update.message.reply_text(trans_text, parse_mode='Markdown')

@sync_to_async
def get_users_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    from django.db.models import Count
    
    total_users = TelegramUser.objects.count()
    clients = TelegramUser.objects.filter(role=UserRole.CLIENT).count()
    merchants = TelegramUser.objects.filter(role=UserRole.MERCHANT).count()
    admins = TelegramUser.objects.filter(role=UserRole.ADMIN).count()
    
    return {
        'total': total_users,
        'clients': clients,
        'merchants': merchants,
        'admins': admins
    }

async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    stats = await get_users_stats()
    
    users_text = f"""
üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**

üìä –í—Å–µ–≥–æ: {stats['total']}
üõç –ö–ª–∏–µ–Ω—Ç–æ–≤: {stats['clients']}
üíº –ü—Ä–æ–¥–∞–≤—Ü–æ–≤: {stats['merchants']}
‚öôÔ∏è –ê–¥–º–∏–Ω–æ–≤: {stats['admins']}
"""
    
    await update.message.reply_text(users_text, parse_mode='Markdown')

@sync_to_async
def get_general_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    from django.db.models import Sum, Count
    
    total_items = Item.objects.filter(is_active=True).count()
    approved_items = Item.objects.filter(is_approved=True, is_active=True).count()
    pending_items = Item.objects.filter(is_approved=False, is_active=True).count()
    
    total_transactions = Transaction.objects.count()
    completed_transactions = Transaction.objects.filter(status=TransactionStatus.COMPLETED).count()
    
    total_revenue = Transaction.objects.filter(status=TransactionStatus.COMPLETED).aggregate(
        total=Sum('amount')
    )['total'] or 0
    
    total_fees = Transaction.objects.filter(status=TransactionStatus.COMPLETED).aggregate(
        total=Sum('fee_amount')
    )['total'] or 0
    
    return {
        'total_items': total_items,
        'approved_items': approved_items,
        'pending_items': pending_items,
        'total_transactions': total_transactions,
        'completed_transactions': completed_transactions,
        'total_revenue': total_revenue,
        'total_fees': total_fees
    }

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    stats = await get_general_stats()
    
    stats_text = f"""
üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

**–¢–æ–≤–∞—Ä—ã:**
üì¶ –í—Å–µ–≥–æ: {stats['total_items']}
‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved_items']}
‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['pending_items']}

**–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:**
üìä –í—Å–µ–≥–æ: {stats['total_transactions']}
‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_transactions']}

**–§–∏–Ω–∞–Ω—Å—ã:**
üí∞ –û–±–æ—Ä–æ—Ç: {stats['total_revenue']:.2f} —Ä—É–±.
üíµ –ö–æ–º–∏—Å—Å–∏–∏: {stats['total_fees']:.2f} —Ä—É–±.
"""
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user, _ = await get_or_create_user(update.effective_user)
    
    if text == "üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤":
        await show_catalog(update, context)
    elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await profile(update, context)
    elif text == "üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏":
        await show_my_purchases(update, context)
    elif text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤":
        await show_leaderboard(update, context)
    elif text == "üíº –°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º":
        await become_merchant_handler(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        await start_add_item(update, context)
    elif text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã":
        await show_my_items(update, context)
    elif text == "üí∞ –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏":
        await show_my_sales(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã":
        await show_pending_items(update, context)
    elif text == "üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
        await show_transactions(update, context)
    elif text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        await show_users(update, context)
    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics(update, context)
    elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(user.role)
        )
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard(user.role)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    
    if data.startswith('buy_'):
        await buy_item(update, context)
    elif data.startswith('paid_'):
        await payment_confirmed(update, context)
    elif data.startswith('approve_payment_'):
        await admin_approve_payment(update, context)
    elif data.startswith('received_'):
        await item_received(update, context)
    elif data.startswith('complete_'):
        await admin_complete_transaction(update, context)
    elif data.startswith('approve_item_'):
        await admin_approve_item(update, context)

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user, _ = await get_or_create_user(update.effective_user)
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard(user.role)
    )
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    add_item_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä$'), start_add_item)],
        states={
            ADDING_ITEM_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_item_title)],
            ADDING_ITEM_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_item_description)],
            ADDING_ITEM_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_item_price)],
            ADDING_ITEM_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_item_category)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("profile", profile))
    
    # ConversationHandler
    application.add_handler(add_item_conv)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
